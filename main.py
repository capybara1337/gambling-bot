import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import token
import db_manager as db
bot = telebot.TeleBot(token)
bar = {'—è–≥–µ—Ä—å–±–æ–º–±–∞' : 300, '–≤–æ–¥–∫–∞' : 100}

events = {'–§–æ—Ç–æ—Å–µ—Ç —Å –∫–æ–∫–∞–∏–Ω–æ–º' : 10, '–∏–º—è –∏–≤–µ–Ω—Ç–∞ #2' : 15, '–∏–º—è –∏–≤–µ–Ω—Ç–∞ #3' : 20, '–∏–º—è –∏–≤–µ–Ω—Ç–∞ #4' : 25}

def main_menu(message: telebot.types.Message):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫üç∏', callback_data='bar'))
    markup.row(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='send_cash'))
    markup.add(InlineKeyboardButton('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤üèÖ', callback_data='leaderboard'))
    markup.add(InlineKeyboardButton('–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å –í–ª–∞–¥–∞ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—èüéâ', callback_data='congratulations'))
    markup.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è‚úçÔ∏è', callback_data='change_user'))
    markup.add(InlineKeyboardButton('–ú–µ–Ω—é –∏–≤–µ–Ω—Ç–æ–≤ü•≥', callback_data='event_menu'))
    if db.get_info(message)[5] == 1:
        markup.add(InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüíª', callback_data='admin_butt'))
    bot.send_message(message.chat.id, f'–í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {db.get_info(message)[0]} {db.get_info(message)[1]} \n–í–∞—à –±–∞–ª–∞–Ω—Åüí∞: {db.get_info(message)[3]} \n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    db.create(message)
    bot.send_message(message.chat.id, '–ø—Ä–∏–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ªü•∫ ')
    bot.register_next_step_handler(message, user_name)
    #main_menu(message)

def user_name(message):
    try:
        name = message.text.split(' ')
        if name == '':
            raise IndexError
        db.addnametodb(message, name)
    except IndexError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ò–ú–Ø –ø—Ä–æ–±–µ–ª –§–ê–ú–ò–õ–ò–Ø')
        bot.register_next_step_handler(message, user_name)
        return
    bot.send_message(message.chat.id, '–ø–æ–∑–¥—Ä–∞–≤–ª—è—é! —Ç—ã —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç—å –≤–ª–∞–¥–∞ –∫–æ–∑–ª–æ–≤–∞ü§©')
    main_menu(message)

def check_person(message: telebot.types.Message):
    # print(tuple(message.text.split()[1:2]))
    try:
        names = db.get_names(message)
        ind = int(message.text[1:])
        print(ind)
        print(len(names))
        if ind in range(len(names) + 1):
        # if tuple(message.text.split()) in db.get_names(message):
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! (–∫–æ–º–º–∏—Å–∏—è 3%)')
            bot.register_next_step_handler(message, send_cash, db.get_chat_id(names[ind-1]))
        else:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Å—Ç—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏! (–∫–æ–º–º–∏—Å–∏—è 3%)')
        members = db.get_names(message)
        members_out = ''
        count = 1
        for i in members:
            members_out += f'/{count} {i[0]} {i[1]} \n'
            count += 1
        bot.send_message(message.chat.id, members_out)
        bot.register_next_step_handler(message, check_person)

def send_cash(message: telebot.types.Message, id: int):
    try:
        if db.check_wealth(message) == 1:
            db.withdraw_money(message, id)
            bot.send_message(message.chat.id, '–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')
            main_menu(message)
        elif db.check_wealth(message) == -1:
            bot.send_message(message.chat.id, '–ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! (–∫–æ–º–º–∏—Å–∏—è 3%)')
            bot.register_next_step_handler(message, send_cash, id)
        else: raise Exception
    except:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! (–∫–æ–º–º–∏—Å–∏—è 3%)')
        bot.register_next_step_handler(message, send_cash, id)

@bot.callback_query_handler(func=lambda callback: True)
def callback_start(callback: telebot.types.CallbackQuery):
    bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.id, reply_markup=None)
    # print(callback)
    # bot.edit_message_text(text= ,chat_id=callback.message.chat.id, message_id=callback.message.id, reply_markup=)
    if callback.data == 'bar':
        markup = InlineKeyboardMarkup()
        for i in bar.items():
            markup.add(InlineKeyboardButton(i[0] + ' | ' + str(i[1]), callback_data=i[0]))
        bot.send_message(callback.message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—åüçπ:', reply_markup=markup)
    if callback.data == 'canceled':
        bot.send_message(callback.message.chat.id, '–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        main_menu(callback.message)
    if callback.data in bar.keys():
        db.buy_bar(callback.message, callback.data, bar)
        print(callback.data)
        bot.send_message(callback.message.chat.id, '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞—Ä–º–µ–Ω—É ‚úÖ')
        # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º –±–∞—Ä–º–µ–Ω—É :3
        # bot.send_message(—Ç—É—Ç id –±–∞—Ä–º–µ–Ω–∞, '–ó–∞–∫–∞–∑: '+ callback.data + ' ' + db.get_info(message)[0] + db.get_info(message)[1])
        main_menu(callback.message)
    if callback.data == 'leaderboard':
        lb = db.getleaderboard()
        if lb == '':
            bot.send_message(callback.message.chat.id, '–ì–æ—Å—Ç–µ–π –µ—â—ë –Ω–µ—Ç')
        else:
            bot.send_message(callback.message.chat.id, lb)
        main_menu(callback.message)
    if callback.data == 'congratulations':
        # bot.send_message(—Ç—É—Ç id –≤–ª–∞–¥–∞ –∫–æ–∑–ª–æ–≤–∞, '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç' + db.get_info(message)[0] + db.get_info(message)[1])
        pass
    if callback.data == 'change_user':
        bot.send_message(callback.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ªü•∫')
        bot.register_next_step_handler(callback.message, change_user_name)
    if callback.data == 'event_menu':
        markup = InlineKeyboardMarkup()
        for i in events.items():
            markup.add(InlineKeyboardButton(i[0] + ' | ' + str(i[1]), callback_data=i[0]))
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–≤–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å: ', reply_markup=markup)
    if callback.data in events.keys():
        db.buy_event(callback.message, callback.data, events)
        bot.send_message(callback.message.chat.id, '–ò–≤–µ–Ω—Ç ' + callback.data + ' –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!')
        #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–≤–µ–Ω—Ç–µ –∞–¥–º–∏–Ω–∞–º
        main_menu(callback.message)
    if callback.data == 'send_cash':
        members = db.get_names(callback.message)
        members_out = ''
        count = 1
        for i in members:
            members_out += f'/{count} {i[0]} {i[1]} \n'
            count += 1
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Å—Ç—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏! (–∫–æ–º–º–∏—Å–∏—è 3%)')
        bot.send_message(callback.message.chat.id, members_out)
        bot.register_next_step_handler(callback.message, check_person)
    if callback.data == 'admin_butt':
        bot.send_message(callback.message.chat.id, db.getallusers())
        main_menu(callback.message)

def change_user_name(message):
    try:
        name = message.text.split(' ')
        db.addnametodb(message, name)
    except IndexError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ò–ú–Ø –ø—Ä–æ–±–µ–ª –§–ê–ú–ò–õ–ò–Ø')
        bot.register_next_step_handler(message, user_name)
        return
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    main_menu(message)
bot.polling()